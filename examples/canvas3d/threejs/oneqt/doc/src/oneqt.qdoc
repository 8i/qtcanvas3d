/****************************************************************************
**
** Copyright (C) 2015 The Qt Company Ltd.
** Contact: http://www.qt.io/licensing/
**
** This file is part of the QtCanvas3D module of the Qt Toolkit.
**
** $QT_BEGIN_LICENSE:LGPL3$
** Commercial License Usage
** Licensees holding valid commercial Qt licenses may use this file in
** accordance with the commercial license agreement provided with the
** Software or, alternatively, in accordance with the terms contained in
** a written agreement between you and The Qt Company. For licensing terms
** and conditions see http://www.qt.io/terms-conditions. For further
** information use the contact form at http://www.qt.io/contact-us.
**
** GNU Lesser General Public License Usage
** Alternatively, this file may be used under the terms of the GNU Lesser
** General Public License version 3 as published by the Free Software
** Foundation and appearing in the file LICENSE.LGPLv3 included in the
** packaging of this file. Please review the following information to
** ensure the GNU Lesser General Public License version 3 requirements
** will be met: https://www.gnu.org/licenses/lgpl.html.
**
** GNU General Public License Usage
** Alternatively, this file may be used under the terms of the GNU
** General Public License version 2.0 or later as published by the Free
** Software Foundation and appearing in the file LICENSE.GPL included in
** the packaging of this file. Please review the following information to
** ensure the GNU General Public License version 2.0 requirements will be
** met: http://www.gnu.org/licenses/gpl-2.0.html.
**
** $QT_END_LICENSE$
**
****************************************************************************/

/*!
    \example threejs/oneqt
    \since QtCanvas3D 1.0
    \title One Qt Example
    \ingroup qtcanvas3d-examples
    \brief Demonstrates combining Qt Quick and three.js based rendering.

    One Qt example demonstrates how to implement an application that combines the use of three.js
    library based Canvas3D rendering with Qt Quick 2D elements.

    \image oneqt-example.png

    \section1 Qt Quick Implementation

    In \l{threejs/oneqt/oneqt.qml}{oneqt.qml}, we build the 2D content as normally in Qt Quick.
    Then we add a custom ImageCube element in to the scene as the background element. This custom
    component fills the whole parent area and handles the painting of the background and the 3D cube
    for this view.

    \snippet threejs/oneqt/oneqt.qml 0
    \dots

    The custom component takes six images that it loads and places to the sides of the cube.
    In addition the component has a state that defines which of these images is visible.

    \section2 The Custom 3D Qt Quick Element

    In \l{threejs/oneqt/ImageCube.qml}{ImageCube.qml}, we define the cube rotation related
    properties and properties that contain the image file URLs to be loaded for the cube sides.

    \snippet threejs/oneqt/ImageCube.qml 0
    \dots

    The custom component defines six states, one for each side of the cube along with the x, y and
    z rotations that must be set to show that face of the cube.

    \snippet threejs/oneqt/ImageCube.qml 1
    \dots

    We use Qt Quick transitions to animate between the angles to get smooth transitions between
    different cube orientations.

    \snippet threejs/oneqt/ImageCube.qml 2
    \dots

    Finally we call the JavaScript code that uses three.js to do the rendering of the cube, calling
    it on the initializeGL, paintGL and resizeGL signals.

    \snippet threejs/oneqt/ImageCube.qml 3

    \section2 The three.js Code

    In \l{threejs/oneqt/imagecube.js}{imagecube.js}, we start by creating the camera and scene.

    \snippet threejs/oneqt/imagecube.js 0
    \dots

    Then we start the asynchronous loading of the textures and create a material array for the sides
    of the cube (note that the cube needs 12 materials as each side consists of two triangles).

    \snippet threejs/oneqt/imagecube.js 1
    \dots

    We then create the needed geometry as BoxGeometry binding the just created materials to the
    faces of the cube. We then create a MeshFaceMaterial from the array of materials.

    \snippet threejs/oneqt/imagecube.js 2

    Finally we create the cube mesh from the geometry and material, we position it and add it
    to the 3D scene.

    \snippet threejs/oneqt/imagecube.js 3

    Next we create and add some lights to the scene. AmbientLight defines the "surrounding light"
    amount and the directional light is positioned so that it highlights the face of the cube facing
    directly towards the camera.

    \snippet threejs/oneqt/imagecube.js 6

    Final step in the initialization phase is create the Canvas3D renderer and set the
    initial size and clear color (color of the background) to the renderer.

    \snippet threejs/oneqt/imagecube.js 4

    When we need to render the scene in response to the paintGL signal from Canvas3D we just copy
    the current rotation values from the Qt Quick component to the cube mesh in paintGL method.

    \snippet threejs/oneqt/imagecube.js 5
*/
